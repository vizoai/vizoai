"use client";

import { StyleProvider, createCache, extractStyle } from "@ant-design/cssinjs";
import type { StyleProviderProps } from "@ant-design/cssinjs";
import { ConfigProvider, theme } from "antd";
import { useTheme } from "next-themes";
import { useServerInsertedHTML } from "next/navigation";
import type { FC, PropsWithChildren } from "react";
import { memo, useRef, useState, useEffect } from "react";

type AntdStyleRegistryProps = Omit<StyleProviderProps, "cache">;

const AntdStyleRegistry: FC<AntdStyleRegistryProps> = (props) => {
  const [cache] = useState(() => createCache());
  const inserted = useRef(false);

  useServerInsertedHTML(() => {
    const styleText = extractStyle(cache, { plain: true });

    if (inserted.current) {
      return null;
    }
    inserted.current = true;

    return (
      <style
        id="antd-css"
        // to make sure this style is inserted before Ant Design's style generated by client
        data-rc-order="prepend"
        data-rc-priority="-1000"
        dangerouslySetInnerHTML={{ __html: styleText }}
      />
    );
  });

  return <StyleProvider {...props} cache={cache} />;
};

const AntdRegistry = memo((props: PropsWithChildren) => {
  const { resolvedTheme: nowTheme } = useTheme();
  // const [mounted, setMounted] = useState(false);

  // useEffect only runs on the client, so now we can safely show the UI
  // useEffect(() => {
  //   setMounted(true);
  // }, []);

  // if (!mounted) {
  //   return <div className="hidden">{props.children}</div>;
  // }

  return (
    <ConfigProvider
      theme={{
        cssVar: true,
        components: {
          Layout: {
            headerBg: "val(--background)",
          },
        },
        algorithm:
          nowTheme === "dark" ? theme.darkAlgorithm : theme.defaultAlgorithm,
      }}
    >
      <AntdStyleRegistry>{props.children}</AntdStyleRegistry>
    </ConfigProvider>
  );
});

AntdRegistry.displayName = "AntdRegistry";

export default AntdRegistry;
